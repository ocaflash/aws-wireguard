name: "Terraform Checks and PR Creation"

on:
  push:
    branches-ignore:
      - master

jobs:
  terraform-checks:
    name: "Terraform Checks"
    runs-on: ubuntu-latest

    outputs:
      tflint_warnings: ${{ steps.tflint.outputs.warnings }}
      has_warnings: ${{ steps.tflint.outputs.has_warnings }}

    permissions:
      contents: write
      pull-requests: write

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.5.0"

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
        aws-region: ap-south-1

    - name: Setup tflint
      run: |
        curl -s https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash

    - name: Run tflint
      id: tflint
      shell: bash
      run: |
          set +e
          TFLINT_OUTPUT=$(tflint)
          TFLINT_EXIT_CODE=$?
          set -e
          
          echo "TFLint output:"
          echo "$TFLINT_OUTPUT" | sed 's/Warning:/\x1b[33mWarning:\x1b[0m/g'
          
          if echo "$TFLINT_OUTPUT" | grep -q "Warning:"; then
            echo "has_warnings=true" >> "$GITHUB_OUTPUT"
            {
              echo "warnings<<EOWARN"
              # Экранируем специальные символы и форматируем вывод
              echo "$TFLINT_OUTPUT" | grep -A 2 "Warning:" | \
                sed 's/`/'\''/g' | \
                sed 's/\\/\\\\/g' | \
                sed 's/"/\\"/g' | \
                sed 's/$/\\n/'
              echo "EOWARN"
            } >> "$GITHUB_OUTPUT"
          else
            echo "has_warnings=false" >> "$GITHUB_OUTPUT"
          fi
          
          if echo "$TFLINT_OUTPUT" | grep -q "Error:"; then
            exit 1
          fi
          exit 0

    - name: Terraform Format
      run: terraform fmt -check

    - name: Terraform Init
      run: terraform init

    - name: Terraform Validate
      run: terraform validate

  createPullRequest:
    name: Create Pull Request
    runs-on: ubuntu-latest
    needs:
      - terraform-checks
    permissions:
      contents: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Create or Update Pull Request
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { repo, owner } = context.repo;
            const currentBranch = context.ref.replace('refs/heads/', '');
            
            let prBody = 'Automated pull request for code review\n- Terraform configuration validated\n- CI checks completed successfully\n\n';
            
            const hasWarnings = '${{ needs.terraform-checks.outputs.has_warnings }}' === 'true';
            if (hasWarnings) {
              // Используем JSON.stringify для безопасной обработки строки
              const warningsRaw = '${{ needs.terraform-checks.outputs.tflint_warnings }}';
              const warnings = JSON.parse(JSON.stringify(warningsRaw))
                .replace(/\\n/g, '\n')
                .replace(/\\"/g, '"')
                .replace(/`/g, "'");
            
              prBody += '### ⚠️ TFLint Warnings:\n```\n' + warnings + '\n```\n\n';
              prBody += 'Please review these warnings before merging.\n';
            }
            
            // Поиск существующего PR
            const existingPRs = await github.rest.pulls.list({
              owner,
              repo,
              head: `${owner}:${currentBranch}`,
              state: 'open'
            });
            
            if (existingPRs.data.length > 0) {
              // Обновляем существующий PR
              const pr = existingPRs.data[0];
              await github.rest.pulls.update({
                owner,
                repo,
                pull_number: pr.number,
                body: prBody
              });
              console.log(`Updated existing PR #${pr.number}`);
            } else {
              // Создаем новый PR
              const newPR = await github.rest.pulls.create({
                owner,
                repo,
                title: `Review: Changes in ${currentBranch}`,
                head: currentBranch,
                base: 'master',
                body: prBody
              });
              console.log(`Created new PR #${newPR.data.number}`);
            }