name: "Terraform Checks and PR Creation"

on:
  push:
    branches-ignore:
      - master

jobs:
  terraform-checks:
    name: "Terraform Checks"
    runs-on: ubuntu-latest

    outputs:
      tflint_warnings: ${{ steps.tflint.outputs.warnings }}
      has_warnings: ${{ steps.tflint.outputs.has_warnings }}

    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.5.0"

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ap-south-1

      - name: Setup tflint
        run: |
          curl -s https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash

      - name: Run tflint
        id: tflint
        shell: bash
        run: |
          set +e
          TFLINT_OUTPUT=$(tflint)
          TFLINT_EXIT_CODE=$?
          set -e

          echo "TFLint output:"
          echo "$TFLINT_OUTPUT" | sed 's/Warning:/\x1b[33mWarning:\x1b[0m/g'

          if echo "$TFLINT_OUTPUT" | grep -q "Warning:"; then
            echo "has_warnings=true" >> "$GITHUB_OUTPUT"
            {
              echo "warnings<<EOWARN"
              separator_length=40
              separator=$(printf '%.0s-' $(seq 1 $separator_length))
              while IFS= read -r line; do
                if [[ $line == Warning:* ]]; then
                  line_without_warning=$(echo "$line" | sed 's/^Warning: //')
                  if [[ -n $current_warning ]]; then
                    echo -e "$current_warning" | sed 's/`/'\''/g' | sed 's/\\/\\\\/g' | sed 's/"/\\"/g' | sed 's/$/\\n/'
                  fi
                  current_warning="**Warning:** $line_without_warning"
                elif [[ $line == Reference:* ]]; then
                  reference_url=$(echo "$line" | sed 's/.*https/https/')
                  current_warning+="\n**Reference:** [$reference_url]($reference_url)"
                  echo -e "$current_warning" | sed 's/`/'\''/g' | sed 's/\\/\\\\/g' | sed 's/"/\\"/g' | sed 's/$/\\n/'
                  echo "$separator"
                  current_warning=""
                else
                  current_warning+="\n$line"
                fi
              done <<< "$TFLINT_OUTPUT"
              echo "EOWARN"
            } >> "$GITHUB_OUTPUT"
          else
            echo "has_warnings=false" >> "$GITHUB_OUTPUT"
          fi

          if echo "$TFLINT_OUTPUT" | grep -q "Error:"; then
            exit 1
          fi
          exit 0

      - name: Terraform Format
        run: terraform fmt -check

      - name: Terraform Init
        run: terraform init

      - name: Terraform Validate
        run: terraform validate

  createPullRequest:
    name: Create or Update Pull Request
    runs-on: ubuntu-latest
    needs:
      - terraform-checks
    permissions:
      contents: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Construct PR Body
        id: construct_pr_body
        run: |
            pr_body="Automated pull request for code review\n- Terraform configuration validated\n- CI checks completed successfully\n\n"
            if [ "${{ needs.terraform-checks.outputs.has_warnings }}" == "true" ]; then
              warnings=$(echo -e "${{ needs.terraform-checks.outputs.tflint_warnings }}" | sed ':a;N;$!ba;s/\n\{3,\}/\n\n/g')
              pr_body+="### ⚠️ TFLint Warnings:\n\n$warnings\n\n\nPlease review these warnings before merging.\n"
            fi
            echo "pr_body<<EOF" >> $GITHUB_ENV
            echo -e "$pr_body" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV

      - name: Check if PR exists
        id: check_pr
        uses: actions/github-script@v6
        with:
          script: |
            try {
              const pullRequests = await github.rest.pulls.list({
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: "open",
                head: `${context.repo.owner}:${context.ref.replace('refs/heads/', '')}`,
              });
              if (pullRequests.data.length > 0) {
                core.setOutput("pr_exists", "true");
                core.setOutput("pr_number", pullRequests.data[0].number);
              } else {
                core.setOutput("pr_exists", "false");
              }
            } catch (error) {
              core.setFailed(`Failed to check for existing PR: ${error.message}`);
            }
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Update PR Body if Exists
        if: steps.check_pr.outputs.pr_exists == 'true'
        uses: actions/github-script@v6
        with:
          script: |
            try {
              await github.rest.pulls.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: parseInt(process.env.PR_NUMBER, 10),
                body: process.env.pr_body,
              });
            } catch (error) {
              core.setFailed(`Failed to update PR: ${error.message}`);
            }
        env:
          PR_NUMBER: ${{ steps.check_pr.outputs.pr_number }}
          pr_body: ${{ env.pr_body }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Create PR if Not Exists
        if: steps.check_pr.outputs.pr_exists == 'false'
        uses: actions/github-script@v6
        with:
          script: |
            const { data: pr } = await github.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Review: Changes in ${context.ref}`,
              head: context.ref.replace('refs/heads/', ''),
              base: "master",
              body: process.env.pr_body,
            });
            core.setOutput("pr_url", pr.html_url);
        env:
          pr_body: ${{ env.pr_body }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
