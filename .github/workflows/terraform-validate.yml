name: "Terraform Validation and PR Management"

on:
  push:
    branches-ignore:
      - master
    paths:
      - '**.tf'
      - '**.tfvars'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  TF_VERSION: "1.9.4"
  AWS_REGION: "ap-south-1"

jobs:
  terraform-checks:
    name: "Terraform Validation"
    runs-on: ubuntu-latest
    timeout-minutes: 30

    outputs:
      tflint_warnings: ${{ steps.tflint.outputs.warnings }}
      has_warnings: ${{ steps.tflint.outputs.has_warnings }}

    permissions:
      contents: read
      pull-requests: write

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup TFLint with Caching
        uses: actions/cache@v4
        with:
          path: ~/.tflint.d/plugins
          key: tflint-${{ hashFiles('.tflint.hcl') }}

      - name: Install TFLint
        run: |
          curl -s https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash
          tflint --init

      - name: Run TFLint
        id: tflint
        shell: bash
        run: |
          set +e
          TFLINT_OUTPUT=$(tflint --format default)
          TFLINT_EXIT_CODE=$?
          set -e

          echo "TFLint output:"
          echo "$TFLINT_OUTPUT" | sed 's/Warning:/\x1b[33mWarning:\x1b[0m/g'

          # Process warnings and create formatted output
          if echo "$TFLINT_OUTPUT" | grep -q "Warning:"; then
            echo "has_warnings=true" >> "$GITHUB_OUTPUT"
            {
              echo "warnings<<EOWARN"
              separator="----------------------------------------"
              issue_number=1
              
              echo "$TFLINT_OUTPUT" | while IFS= read -r line; do
                if [[ $line == Warning:* ]]; then
                  [ -n "$current_warning" ] && echo -e "$current_warning\n$separator"
                  current_warning="**Issue #$issue_number:** ${line#Warning: }"
                  ((issue_number++))
                elif [[ $line == Reference:* ]]; then
                  url=${line#*: }
                  current_warning+="\n**Reference:** [$url]($url)"
                  echo -e "$current_warning\n$separator"
                  current_warning=""
                elif [ -n "$line" ]; then
                  current_warning+="\n$line"
                fi
              done
              
              [ -n "$current_warning" ] && echo -e "$current_warning\n$separator"
              echo "EOWARN"
            } >> "$GITHUB_OUTPUT"
          else
            echo "has_warnings=false" >> "$GITHUB_OUTPUT"
          fi

          exit $TFLINT_EXIT_CODE

      - name: Terraform Format Check
        id: fmt
        run: terraform fmt -check -recursive
        continue-on-error: true

      - name: Terraform Init
        id: init
        run: terraform init -backend=false

      - name: Terraform Validate
        id: validate
        run: terraform validate

  create-pull-request:
    name: "PR Management"
    runs-on: ubuntu-latest
    needs: terraform-checks
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Prepare PR Content
        id: pr_content
        run: |
          {
            echo "pr_body<<EOF"
            echo "## Terraform Changes Review"
            echo "### 🔍 Validation Results"
            echo "- ✅ Terraform configuration validated"
            echo "- ✅ CI checks completed"
            echo ""
            
            if [ "${{ needs.terraform-checks.outputs.has_warnings }}" == "true" ]; then
              echo "### ⚠️ TFLint Warnings"
              echo "${{ needs.terraform-checks.outputs.tflint_warnings }}"
              echo ""
              echo "⚠️ **Please review these warnings before merging**"
            else
              echo "### ✅ No TFLint Warnings"
            fi
            
            echo ""
            echo "### 📝 Next Steps"
            echo "1. Review the changes"
            echo "2. Address any warnings if present"
            echo "3. Approve and merge if everything looks good"
            echo "EOF"
          } >> $GITHUB_ENV

      - name: Manage Pull Request
        uses: actions/github-script@v7
        with:
          script: |
            const branch = context.ref.replace('refs/heads/', '');
            const title = `[Terraform] Changes in ${branch}`;
            
            try {
              // Check for existing PR
              const { data: prs } = await github.rest.pulls.list({
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: 'open',
                head: `${context.repo.owner}:${branch}`,
              });
              
              if (prs.length > 0) {
                // Update existing PR
                await github.rest.pulls.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: prs[0].number,
                  body: process.env.pr_body,
                });
                console.log(`Updated PR #${prs[0].number}`);
              } else {
                // Create new PR
                const { data: pr } = await github.rest.pulls.create({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  title: title,
                  head: branch,
                  base: 'master',
                  body: process.env.pr_body,
                });
                console.log(`Created PR #${pr.number}`);
              }
            } catch (error) {
              core.setFailed(`PR operation failed: ${error.message}`);
            }
        env:
          pr_body: ${{ env.pr_body }}
