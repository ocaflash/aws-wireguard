name: "Terraform Validation and PR Management"

on:
  push:
    branches-ignore:
      - master
    paths:
      - '**.tf'
      - '**.tfvars'
      - '.github/workflows/terraform-validate.yml'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  TF_VERSION: "1.9.4"
  AWS_REGION: "ap-south-1"

jobs:
  terraform-checks:
    name: "Terraform Validation"
    runs-on: ubuntu-latest

    outputs:
      tflint_warnings: ${{ steps.tflint.outputs.warnings }}
      has_warnings: ${{ steps.tflint.outputs.has_warnings }}

    permissions:
      contents: read
      pull-requests: write

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install TFLint
        run: |
          curl -s https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash

      - name: Run TFLint
        id: tflint
        shell: bash
        continue-on-error: true  # Allow the workflow to continue even if TFLint finds issues
        run: |
          set +e
          TFLINT_OUTPUT=$(tflint)
          TFLINT_EXIT_CODE=$?
          set -e

          echo "TFLint output:"
          echo "$TFLINT_OUTPUT"

          if echo "$TFLINT_OUTPUT" | grep -q "Warning:"; then
            echo "has_warnings=true" >> "$GITHUB_OUTPUT"
            {
              echo "warnings<<EOWARN"
              separator_length=40
              separator=$(printf '%.0s-' $(seq 1 $separator_length))
              issue_number=1
              while IFS= read -r line; do
                if [[ $line == Warning:* ]]; then
                  line_without_warning=$(echo "$line" | sed 's/^Warning: //')
                  if [[ -n $current_warning ]]; then
                    echo -e "$current_warning" | sed 's/`/'\''/g' | sed 's/\\/\\\\/g' | sed 's/"/\\"/g' | sed 's/$/\\n/'
                  fi
                  current_warning="**$issue_number).** **Warning:** $line_without_warning"
                  issue_number=$((issue_number + 1))
                elif [[ $line == Reference:* ]]; then
                  reference_url=$(echo "$line" | sed 's/.*https/https/')
                  current_warning+="\n**Reference:** [$reference_url]($reference_url)"
                  echo -e "$current_warning" | sed 's/`/'\''/g' | sed 's/\\/\\\\/g' | sed 's/"/\\"/g' | sed 's/$/\\n/'
                  echo "$separator"
                  current_warning=""
                else
                  current_warning+="\n$line"
                fi
              done <<< "$TFLINT_OUTPUT"
              echo "EOWARN"
            } >> "$GITHUB_OUTPUT"
          else
            echo "has_warnings=false" >> "$GITHUB_OUTPUT"
          fi

          # We don't exit with error code even if TFLint found issues
          exit 0

      - name: Terraform Format
        run: terraform fmt -check

      - name: Terraform Init
        run: terraform init

      - name: Terraform Validate
        run: terraform validate

  create-pull-request:
    name: "PR Management"
    runs-on: ubuntu-latest
    needs: terraform-checks
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Prepare PR Content
        id: prepare_pr
        run: |
          pr_body="## Terraform Changes Review\n\n"
          pr_body+="### üîç Validation Results\n"
          pr_body+="- ‚úÖ Terraform configuration validated\n"
          pr_body+="- ‚úÖ CI checks completed\n\n"
          
          if [ "${{ needs.terraform-checks.outputs.has_warnings }}" == "true" ]; then
            pr_body+="### ‚ö†Ô∏è TFLint Warnings (Non-Critical)\n\n"
            pr_body+="The following warnings were found but are not blocking the deployment:\n\n"
            pr_body+="${{ needs.terraform-checks.outputs.tflint_warnings }}\n\n"
            pr_body+="**Note:** These warnings are informational and do not prevent merging.\n"
          fi
          
          echo "pr_body<<EOF" >> $GITHUB_ENV
          echo -e "$pr_body" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Check Existing PR
        id: check_pr
        uses: actions/github-script@v7
        with:
          script: |
            try {
              const pullRequests = await github.rest.pulls.list({
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: "open",
                head: `${context.repo.owner}:${context.ref.replace('refs/heads/', '')}`,
              });
              if (pullRequests.data.length > 0) {
                core.setOutput("pr_exists", "true");
                core.setOutput("pr_number", pullRequests.data[0].number);
              } else {
                core.setOutput("pr_exists", "false");
              }
            } catch (error) {
              core.setFailed(`Failed to check for existing PR: ${error.message}`);
            }

      - name: Update Existing PR
        if: steps.check_pr.outputs.pr_exists == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            try {
              await github.rest.pulls.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: parseInt(process.env.PR_NUMBER, 10),
                body: process.env.pr_body,
              });
            } catch (error) {
              core.setFailed(`Failed to update PR: ${error.message}`);
            }
        env:
          PR_NUMBER: ${{ steps.check_pr.outputs.pr_number }}
          pr_body: ${{ env.pr_body }}

      - name: Create New PR
        if: steps.check_pr.outputs.pr_exists == 'false'
        uses: actions/github-script@v7
        with:
          script: |
            try {
              const { data: pr } = await github.rest.pulls.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `Review: Changes in ${context.ref.replace('refs/heads/', '')}`,
                head: context.ref.replace('refs/heads/', ''),
                base: "master",
                body: process.env.pr_body,
              });
              core.setOutput("pr_url", pr.html_url);
            } catch (error) {
              core.setFailed(`Failed to create PR: ${error.message}`);
            }
        env:
          pr_body: ${{ env.pr_body }}