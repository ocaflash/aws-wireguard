name: "Terraform Validation"

on:
  pull_request:
    branches:
      - master
    paths:
      - '**.tf'
      - '**.tfvars'
  push:
    branches-ignore:
      - master
    paths:
      - '**.tf'
      - '**.tfvars'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  TF_VERSION: "1.9.4"
  AWS_REGION: "ap-south-1"

jobs:
  terraform-checks:
    name: "Terraform Validation"
    runs-on: ubuntu-latest

    permissions:
      contents: read
      pull-requests: write
      checks: write # –î–æ–±–∞–≤–ª–µ–Ω–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è check runs
      statuses: write # –î–æ–±–∞–≤–ª–µ–Ω–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ status checks

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install TFLint
        run: |
          curl -s https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash

      - name: Terraform Format
        id: fmt
        continue-on-error: true
        run: terraform fmt -check
        if: github.event_name == 'pull_request'

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Run TFLint
        id: tflint
        shell: bash
        run: |
          set +e
          TFLINT_OUTPUT=$(tflint --format compact)
          TFLINT_EXIT_CODE=$?
          set -e

          echo "TFLint output:"
          echo "$TFLINT_OUTPUT"

          # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ check run
          {
            echo "output<<EOF"
            echo "$TFLINT_OUTPUT"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

          echo "exit_code=$TFLINT_EXIT_CODE" >> "$GITHUB_OUTPUT"

          # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º warnings –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –≤ PR
          if echo "$TFLINT_OUTPUT" | grep -q "Warning:"; then
            echo "has_warnings=true" >> "$GITHUB_OUTPUT"
            {
              echo "warnings<<EOWARN"
              separator_length=40
              separator=$(printf '%.0s-' $(seq 1 $separator_length))
              issue_number=1
              while IFS= read -r line; do
                if [[ $line == Warning:* ]]; then
                  line_without_warning=$(echo "$line" | sed 's/^Warning: //')
                  if [[ -n $current_warning ]]; then
                    echo -e "$current_warning" | sed 's/`/'\''/g' | sed 's/\\/\\\\/g' | sed 's/"/\\"/g' | sed 's/$/\\n/'
                  fi
                  current_warning="**$issue_number).** **Warning:** $line_without_warning"
                  issue_number=$((issue_number + 1))
                elif [[ $line == Reference:* ]]; then
                  reference_url=$(echo "$line" | sed 's/.*https/https/')
                  current_warning+="\n**Reference:** [$reference_url]($reference_url)"
                  echo -e "$current_warning" | sed 's/`/'\''/g' | sed 's/\\/\\\\/g' | sed 's/"/\\"/g' | sed 's/$/\\n/'
                  echo "$separator"
                  current_warning=""
                else
                  current_warning+="\n$line"
                fi
              done <<< "$TFLINT_OUTPUT"
              echo "EOWARN"
            } >> "$GITHUB_OUTPUT"
          else
            echo "has_warnings=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Update Check Run
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const checkConclusion = () => {
              if (process.env.VALIDATE_EXIT !== '0') return 'failure';
              if (process.env.FMT_EXIT !== '0') return 'failure';
              if (process.env.TFLINT_EXIT !== '0') return 'failure';
              return 'success';
            };

            const formatStatus = (step, exit_code) => {
              return exit_code === '0' 
                ? `‚úÖ ${step} passed`
                : `‚ùå ${step} failed`;
            };

            const summary = [
              `### Terraform Validation Results`,
              '',
              formatStatus('Terraform Format', process.env.FMT_EXIT),
              formatStatus('Terraform Validate', process.env.VALIDATE_EXIT),
              formatStatus('TFLint', process.env.TFLINT_EXIT),
              '',
              process.env.TFLINT_OUTPUT ? '### TFLint Output\n```\n' + process.env.TFLINT_OUTPUT + '\n```' : '',
            ].join('\n');

            await github.rest.checks.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: 'Terraform Validation',
              head_sha: context.payload.pull_request.head.sha,
              status: 'completed',
              conclusion: checkConclusion(),
              output: {
                title: 'Terraform Validation Results',
                summary: summary
              }
            });
        env:
          VALIDATE_EXIT: ${{ steps.validate.outcome == 'success' && '0' || '1' }}
          FMT_EXIT: ${{ steps.fmt.outcome == 'success' && '0' || '1' }}
          TFLINT_EXIT: ${{ steps.tflint.outputs.exit_code }}
          TFLINT_OUTPUT: ${{ steps.tflint.outputs.output }}

      - name: Add PR Comment
        if: github.event_name == 'pull_request' && (steps.tflint.outputs.has_warnings == 'true' || steps.fmt.outcome == 'failure' || steps.validate.outcome == 'failure')
        uses: actions/github-script@v7
        with:
          script: |
            const formatError = (step, outcome) => {
              return outcome === 'success' 
                ? `‚úÖ ${step} passed`
                : `‚ùå ${step} failed`;
            };

            let prComment = `## Terraform Changes Review

            ### üîç Validation Results
            ${formatError('Terraform Format', process.env.FMT_OUTCOME)}
            ${formatError('Terraform Validate', process.env.VALIDATE_OUTCOME)}
            ${formatError('TFLint', process.env.TFLINT_OUTCOME)}`;

            if (process.env.HAS_WARNINGS === 'true') {
              prComment += `\n\n### ‚ö†Ô∏è TFLint Warnings\n\n${process.env.TFLINT_WARNINGS}\n\n`;
            }

            prComment += '\n\n**Note:** Please fix any failed checks before merging.';

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: prComment
            });
        env:
          FMT_OUTCOME: ${{ steps.fmt.outcome }}
          VALIDATE_OUTCOME: ${{ steps.validate.outcome }}
          TFLINT_OUTCOME: ${{ steps.tflint.outcome }}
          HAS_WARNINGS: ${{ steps.tflint.outputs.has_warnings }}
          TFLINT_WARNINGS: ${{ steps.tflint.outputs.warnings }}
