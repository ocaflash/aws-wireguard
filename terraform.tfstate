{
  "version": 4,
  "terraform_version": "1.1.5",
  "serial": 811,
  "lineage": "0e19733c-be64-a5c2-2d79-428b4927b28c",
  "outputs": {},
  "resources": [
    {
      "mode": "data",
      "type": "aws_ami",
      "name": "latest_ubuntu",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "architecture": "x86_64",
            "arn": "arn:aws:ec2:us-west-2::image/ami-0123376e204addb71",
            "block_device_mappings": [
              {
                "device_name": "/dev/sda1",
                "ebs": {
                  "delete_on_termination": "true",
                  "encrypted": "false",
                  "iops": "0",
                  "snapshot_id": "snap-0299f5804ab563d0a",
                  "throughput": "0",
                  "volume_size": "8",
                  "volume_type": "gp2"
                },
                "no_device": "",
                "virtual_name": ""
              },
              {
                "device_name": "/dev/sdb",
                "ebs": {},
                "no_device": "",
                "virtual_name": "ephemeral0"
              },
              {
                "device_name": "/dev/sdc",
                "ebs": {},
                "no_device": "",
                "virtual_name": "ephemeral1"
              }
            ],
            "boot_mode": "",
            "creation_date": "2022-09-02T01:14:42.000Z",
            "deprecation_time": "2024-09-02T01:14:42.000Z",
            "description": "Canonical, Ubuntu, 20.04 LTS, amd64 focal image build on 2022-09-01",
            "ena_support": true,
            "executable_users": null,
            "filter": [
              {
                "name": "architecture",
                "values": [
                  "x86_64"
                ]
              },
              {
                "name": "name",
                "values": [
                  "ubuntu/images/hvm-ssd/ubuntu-focal-20.04-*-server-*"
                ]
              }
            ],
            "hypervisor": "xen",
            "id": "ami-0123376e204addb71",
            "image_id": "ami-0123376e204addb71",
            "image_location": "amazon/ubuntu/images/hvm-ssd/ubuntu-focal-20.04-amd64-server-20220901",
            "image_owner_alias": "amazon",
            "image_type": "machine",
            "include_deprecated": false,
            "kernel_id": "",
            "most_recent": true,
            "name": "ubuntu/images/hvm-ssd/ubuntu-focal-20.04-amd64-server-20220901",
            "name_regex": null,
            "owner_id": "099720109477",
            "owners": [
              "099720109477"
            ],
            "platform": "",
            "platform_details": "Linux/UNIX",
            "product_codes": [],
            "public": true,
            "ramdisk_id": "",
            "root_device_name": "/dev/sda1",
            "root_device_type": "ebs",
            "root_snapshot_id": "snap-0299f5804ab563d0a",
            "sriov_net_support": "simple",
            "state": "available",
            "state_reason": {
              "code": "UNSET",
              "message": "UNSET"
            },
            "tags": {},
            "timeouts": null,
            "tpm_support": "",
            "usage_operation": "RunInstances",
            "virtualization_type": "hvm"
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "mode": "data",
      "type": "aws_iam_policy_document",
      "name": "ec2-assume-role",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "1903849331",
            "json": "{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\": \"\",\n      \"Effect\": \"Allow\",\n      \"Action\": \"sts:AssumeRole\",\n      \"Principal\": {\n        \"Service\": \"ec2.amazonaws.com\"\n      }\n    }\n  ]\n}",
            "override_json": null,
            "override_policy_documents": null,
            "policy_id": null,
            "source_json": null,
            "source_policy_documents": null,
            "statement": [
              {
                "actions": [
                  "sts:AssumeRole"
                ],
                "condition": [],
                "effect": "Allow",
                "not_actions": [],
                "not_principals": [],
                "not_resources": [],
                "principals": [
                  {
                    "identifiers": [
                      "ec2.amazonaws.com"
                    ],
                    "type": "Service"
                  }
                ],
                "resources": [],
                "sid": ""
              }
            ],
            "version": "2012-10-17"
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "mode": "data",
      "type": "template_file",
      "name": "conf_backup",
      "provider": "provider[\"registry.terraform.io/hashicorp/template\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "filename": null,
            "id": "f3acc5541cd0f82379763fd644905f7910d831e5abd154456f5e998e9ff7b025",
            "rendered": "#/bin/bash\n\nPOSTFIX_DATE=$(date +%Y-%m-%d_%H-%M-%S)\ntar cvzf /tmp/\"backup_$POSTFIX_DATE.tgz\" --absolute-names /home/wguser/wireguard/linguard/data/*\naws s3 cp /tmp/\"backup_$POSTFIX_DATE.tgz\" s3://\"wireguard-backup-8324868d928c0099\"/`date +%Y`/`date +%m`/backup_$POSTFIX_DATE.tgz\nsudo rm -R /tmp/backup_*.tgz\n",
            "template": "#/bin/bash\n\nPOSTFIX_DATE=$(date +%Y-%m-%d_%H-%M-%S)\ntar cvzf /tmp/\"backup_$POSTFIX_DATE.tgz\" --absolute-names /home/wguser/wireguard/linguard/data/*\naws s3 cp /tmp/\"backup_$POSTFIX_DATE.tgz\" s3://\"${name_prefix}-backup-${project_uuid}\"/`date +%Y`/`date +%m`/backup_$POSTFIX_DATE.tgz\nsudo rm -R /tmp/backup_*.tgz\n",
            "vars": {
              "name_prefix": "wireguard",
              "project_uuid": "8324868d928c0099"
            }
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "mode": "data",
      "type": "template_file",
      "name": "conf_create",
      "provider": "provider[\"registry.terraform.io/hashicorp/template\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "filename": null,
            "id": "becec960d270cee2813bbceb1754eb54c2998f8b3ef7c81acd0aea880de5df72",
            "rendered": "import json\nimport yaml\n\nfrom os.path import dirname, join\nfrom os.path import exists\nfrom uuid import uuid4 as gen_uuid\nfrom typing import Dict, Any\n\nfrom linguard.common.models.user import users, User\nfrom linguard.common.properties import global_properties\nfrom linguard.common.utils.system import try_makedir, Command\nfrom linguard.core.config.web import config as web_config\nfrom linguard.core.config.wireguard import config\nfrom linguard.core.managers.wireguard import wireguard_manager\nfrom linguard.core.managers.config import config_manager\nfrom linguard.core.models import interfaces, Interface, Peer\nfrom linguard.core.utils.wireguard import generate_privkey, generate_pubkey\n\n\nfilepath = \"data/linguard.yaml\"\nfile_users = \"data/users.csv\"\n\non_up = [\"/usr/sbin/iptables -I FORWARD -i tough-moth -j ACCEPT\",\n         \"/usr/sbin/iptables -I FORWARD -o tough-moth -j ACCEPT\",\n         \"/usr/sbin/iptables -t nat -I POSTROUTING -o eth0 -j MASQUERADE\"]\n\non_down = [\"/usr/sbin/iptables -D FORWARD -i tough-moth -j ACCEPT\",\n           \"/usr/sbin/iptables -D FORWARD -o tough-moth -j ACCEPT\",\n           \"/usr/sbin/iptables -t nat -D POSTROUTING -o eth0 -j MASQUERADE\"]\n\n\ndef cleanup():\n    yield\n    config_manager.load_defaults()\n    config.load_defaults()\n\n\ndef find_yaml_data(config_file):\n    with open(config_file) as fh:\n        dictionary_data = yaml.safe_load(fh)\n    return dictionary_data['web'].secret_key\n\n\ndef create_admin(user, passwd):\n    admin_user = User(user)\n    admin_user.password = passwd\n    users[admin_user.id] = admin_user\n    workdir = join(dirname(__file__), \"data\")\n    try_makedir(workdir)\n    global_properties.workdir = workdir\n    config_manager.load()\n    config_manager.save()\n    users.save(web_config.credentials_file, find_yaml_data(filepath))\n\n\ndef interface_dict():\n    dct = dict()\n    uuid = gen_uuid().hex\n    dct[\"name\"] = \"wg0\"\n    dct[\"uuid\"] = uuid\n    dct[\"description\"] = \"vpn for scranton branch\"\n    dct[\"gw_iface\"] = \"wg0\"\n    dct[\"ipv4_address\"] = \"192.168.10.2/26\"\n    dct[\"listen_port\"] = \"24084\"\n    dct[\"auto\"] = True\n    dct[\"on_up\"] = on_up\n    dct[\"on_down\"] = on_down\n    return dct\n\n\ndef get_system_interfaces() -\u003e Dict[str, Any]:\n    ifaces = {}\n    for iface in json.loads(Command(\"ip -json address\").run().output):\n        ifaces[iface[\"ifname\"]] = iface\n    return ifaces\n\n\ndef create_iface(name, ipv4, port):\n    gw = list(filter(lambda i: i != \"lo\", get_system_interfaces().keys()))[0]\n    return Interface(name=name, description=\"\", gw_iface=gw, ipv4_address=ipv4, listen_port=port, auto=False,\n                     on_up=on_up, on_down=on_down)\n\n\ndef add_peers(iface):\n    if exists(file_users):\n        with open(file_users, 'r') as f:\n            list_users = f.read().splitlines()\n        for user in list_users:\n            list_user = user.split(':')\n            ipv4_address_interface = \"192.168.10.2\"\n            index_ldot = ipv4_address_interface.rfind('.')+1\n            ipv4_address_client=ipv4_address_interface[:index_ldot]+str(int(list_user[0])+int(10))+\"/32\"\n            peer = Peer(name=list_user[1], description=\"\", ipv4_address=ipv4_address_client,\n                        nat=False, interface=iface, dns1=\"8.8.8.8\", dns2=\"1.1.1.1\")\n            iface.add_peer(peer)\n\n\ndef fill_config_data():\n    open(\"data/.setup\", 'w').close()\n    iface = create_iface(interface_dict()[\"name\"], interface_dict()[\"ipv4_address\"],\n                         interface_dict()[\"listen_port\"])\n    interfaces[iface.uuid] = iface\n    add_peers(iface)\n    iface.auto = True\n    iface.up()\n    config.set_default_endpoint()\n    config_manager.config_filepath = filepath\n    config_manager.save()\n    config.apply()\n    wireguard_manager.stop()\n    sleep(1)\n    wireguard_manager.start()\n    cron_manager.start()\n\n# if not exists('data/linguard.yaml.bkp'):\n#     shutil.copy(filepath, 'data/linguard.yaml.bkp')\n# shutil.copy('data/linguard.yaml.bkp', filepath)\n\ncreate_admin(\"admin\", \"eY]2_kV7\")\nfill_config_data()\n",
            "template": "import json\nimport yaml\n\nfrom os.path import dirname, join\nfrom os.path import exists\nfrom uuid import uuid4 as gen_uuid\nfrom typing import Dict, Any\n\nfrom linguard.common.models.user import users, User\nfrom linguard.common.properties import global_properties\nfrom linguard.common.utils.system import try_makedir, Command\nfrom linguard.core.config.web import config as web_config\nfrom linguard.core.config.wireguard import config\nfrom linguard.core.managers.wireguard import wireguard_manager\nfrom linguard.core.managers.config import config_manager\nfrom linguard.core.models import interfaces, Interface, Peer\nfrom linguard.core.utils.wireguard import generate_privkey, generate_pubkey\n\n\nfilepath = \"data/linguard.yaml\"\nfile_users = \"data/users.csv\"\n\non_up = [\"/usr/sbin/iptables -I FORWARD -i tough-moth -j ACCEPT\",\n         \"/usr/sbin/iptables -I FORWARD -o tough-moth -j ACCEPT\",\n         \"/usr/sbin/iptables -t nat -I POSTROUTING -o eth0 -j MASQUERADE\"]\n\non_down = [\"/usr/sbin/iptables -D FORWARD -i tough-moth -j ACCEPT\",\n           \"/usr/sbin/iptables -D FORWARD -o tough-moth -j ACCEPT\",\n           \"/usr/sbin/iptables -t nat -D POSTROUTING -o eth0 -j MASQUERADE\"]\n\n\ndef cleanup():\n    yield\n    config_manager.load_defaults()\n    config.load_defaults()\n\n\ndef find_yaml_data(config_file):\n    with open(config_file) as fh:\n        dictionary_data = yaml.safe_load(fh)\n    return dictionary_data['web'].secret_key\n\n\ndef create_admin(user, passwd):\n    admin_user = User(user)\n    admin_user.password = passwd\n    users[admin_user.id] = admin_user\n    workdir = join(dirname(__file__), \"data\")\n    try_makedir(workdir)\n    global_properties.workdir = workdir\n    config_manager.load()\n    config_manager.save()\n    users.save(web_config.credentials_file, find_yaml_data(filepath))\n\n\ndef interface_dict():\n    dct = dict()\n    uuid = gen_uuid().hex\n    dct[\"name\"] = \"wg0\"\n    dct[\"uuid\"] = uuid\n    dct[\"description\"] = \"vpn for scranton branch\"\n    dct[\"gw_iface\"] = \"wg0\"\n    dct[\"ipv4_address\"] = \"${ipv4_address}/26\"\n    dct[\"listen_port\"] = \"${client_port}\"\n    dct[\"auto\"] = True\n    dct[\"on_up\"] = on_up\n    dct[\"on_down\"] = on_down\n    return dct\n\n\ndef get_system_interfaces() -\u003e Dict[str, Any]:\n    ifaces = {}\n    for iface in json.loads(Command(\"ip -json address\").run().output):\n        ifaces[iface[\"ifname\"]] = iface\n    return ifaces\n\n\ndef create_iface(name, ipv4, port):\n    gw = list(filter(lambda i: i != \"lo\", get_system_interfaces().keys()))[0]\n    return Interface(name=name, description=\"\", gw_iface=gw, ipv4_address=ipv4, listen_port=port, auto=False,\n                     on_up=on_up, on_down=on_down)\n\n\ndef add_peers(iface):\n    if exists(file_users):\n        with open(file_users, 'r') as f:\n            list_users = f.read().splitlines()\n        for user in list_users:\n            list_user = user.split(':')\n            ipv4_address_interface = \"${ipv4_address}\"\n            index_ldot = ipv4_address_interface.rfind('.')+1\n            ipv4_address_client=ipv4_address_interface[:index_ldot]+str(int(list_user[0])+int(10))+\"/32\"\n            peer = Peer(name=list_user[1], description=\"\", ipv4_address=ipv4_address_client,\n                        nat=False, interface=iface, dns1=\"8.8.8.8\", dns2=\"1.1.1.1\")\n            iface.add_peer(peer)\n\n\ndef fill_config_data():\n    open(\"data/.setup\", 'w').close()\n    iface = create_iface(interface_dict()[\"name\"], interface_dict()[\"ipv4_address\"],\n                         interface_dict()[\"listen_port\"])\n    interfaces[iface.uuid] = iface\n    add_peers(iface)\n    iface.auto = True\n    iface.up()\n    config.set_default_endpoint()\n    config_manager.config_filepath = filepath\n    config_manager.save()\n    config.apply()\n    wireguard_manager.stop()\n    sleep(1)\n    wireguard_manager.start()\n    cron_manager.start()\n\n# if not exists('data/linguard.yaml.bkp'):\n#     shutil.copy(filepath, 'data/linguard.yaml.bkp')\n# shutil.copy('data/linguard.yaml.bkp', filepath)\n\ncreate_admin(\"${web_admin_name}\", \"${web_admin_pass}\")\nfill_config_data()\n",
            "vars": {
              "client_port": "24084",
              "ipv4_address": "192.168.10.2",
              "web_admin_name": "admin",
              "web_admin_pass": "eY]2_kV7"
            }
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "vars"
              },
              {
                "type": "index",
                "value": {
                  "value": "web_admin_pass",
                  "type": "string"
                }
              }
            ]
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_default_vpc",
      "name": "default",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "arn": "arn:aws:ec2:us-west-2:207351400916:vpc/vpc-6cc2c514",
            "assign_generated_ipv6_cidr_block": false,
            "cidr_block": "172.31.0.0/16",
            "default_network_acl_id": "acl-0506997e",
            "default_route_table_id": "rtb-66e2021c",
            "default_security_group_id": "sg-b16bd287",
            "dhcp_options_id": "dopt-d7fbc7af",
            "enable_classiclink": false,
            "enable_classiclink_dns_support": false,
            "enable_dns_hostnames": true,
            "enable_dns_support": true,
            "existing_default_vpc": true,
            "force_destroy": false,
            "id": "vpc-6cc2c514",
            "instance_tenancy": "default",
            "ipv6_association_id": "",
            "ipv6_cidr_block": "",
            "ipv6_cidr_block_network_border_group": "",
            "ipv6_ipam_pool_id": "",
            "ipv6_netmask_length": 0,
            "main_route_table_id": "rtb-66e2021c",
            "owner_id": "207351400916",
            "tags": {
              "Name": "Default VPC"
            },
            "tags_all": {
              "Name": "Default VPC"
            }
          },
          "sensitive_attributes": [],
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjEifQ=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_iam_instance_profile",
      "name": "ec2-s3-role",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:iam::207351400916:instance-profile/EC2ToS3Access",
            "create_date": "2022-09-09T07:42:42Z",
            "id": "EC2ToS3Access",
            "name": "EC2ToS3Access",
            "name_prefix": null,
            "path": "/",
            "role": "EC2ToS3Access",
            "tags": {},
            "tags_all": {},
            "unique_id": "AIPATARY3JHKBJQUVW3PU"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "aws_iam_role.ec2-s3-role",
            "data.aws_iam_policy_document.ec2-assume-role"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_iam_role",
      "name": "ec2-s3-role",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:iam::207351400916:role/EC2ToS3Access",
            "assume_role_policy": "{\"Statement\":[{\"Action\":\"sts:AssumeRole\",\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"ec2.amazonaws.com\"},\"Sid\":\"\"}],\"Version\":\"2012-10-17\"}",
            "create_date": "2022-09-09T07:42:41Z",
            "description": "",
            "force_detach_policies": false,
            "id": "EC2ToS3Access",
            "inline_policy": [],
            "managed_policy_arns": [
              "arn:aws:iam::aws:policy/AmazonEC2FullAccess",
              "arn:aws:iam::aws:policy/AmazonS3FullAccess"
            ],
            "max_session_duration": 3600,
            "name": "EC2ToS3Access",
            "name_prefix": "",
            "path": "/",
            "permissions_boundary": null,
            "tags": {},
            "tags_all": {},
            "unique_id": "AROATARY3JHKIEVNBLVHN"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "data.aws_iam_policy_document.ec2-assume-role"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_instance",
      "name": "wireguard",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "ami": "ami-0123376e204addb71",
            "arn": "arn:aws:ec2:us-west-2:207351400916:instance/i-03e63830edd49b139",
            "associate_public_ip_address": true,
            "availability_zone": "us-west-2d",
            "capacity_reservation_specification": [
              {
                "capacity_reservation_preference": "open",
                "capacity_reservation_target": []
              }
            ],
            "cpu_core_count": 1,
            "cpu_threads_per_core": 2,
            "credit_specification": [
              {
                "cpu_credits": "unlimited"
              }
            ],
            "disable_api_stop": false,
            "disable_api_termination": false,
            "ebs_block_device": [],
            "ebs_optimized": false,
            "enclave_options": [
              {
                "enabled": false
              }
            ],
            "ephemeral_block_device": [],
            "get_password_data": false,
            "hibernation": false,
            "host_id": null,
            "host_resource_group_arn": null,
            "iam_instance_profile": "EC2ToS3Access",
            "id": "i-03e63830edd49b139",
            "instance_initiated_shutdown_behavior": "stop",
            "instance_state": "running",
            "instance_type": "t3a.micro",
            "ipv6_address_count": 0,
            "ipv6_addresses": [],
            "key_name": "wireguard-key",
            "launch_template": [],
            "maintenance_options": [
              {
                "auto_recovery": "default"
              }
            ],
            "metadata_options": [
              {
                "http_endpoint": "enabled",
                "http_put_response_hop_limit": 1,
                "http_tokens": "optional",
                "instance_metadata_tags": "disabled"
              }
            ],
            "monitoring": false,
            "network_interface": [],
            "outpost_arn": "",
            "password_data": "",
            "placement_group": "",
            "placement_partition_number": null,
            "primary_network_interface_id": "eni-0696de2120fb994b6",
            "private_dns": "ip-172-31-51-153.us-west-2.compute.internal",
            "private_dns_name_options": [
              {
                "enable_resource_name_dns_a_record": false,
                "enable_resource_name_dns_aaaa_record": false,
                "hostname_type": "ip-name"
              }
            ],
            "private_ip": "172.31.51.153",
            "public_dns": "ec2-44-235-136-229.us-west-2.compute.amazonaws.com",
            "public_ip": "44.235.136.229",
            "root_block_device": [
              {
                "delete_on_termination": true,
                "device_name": "/dev/sda1",
                "encrypted": false,
                "iops": 100,
                "kms_key_id": "",
                "tags": {},
                "throughput": 0,
                "volume_id": "vol-0ab1dc0a2e0dde3d7",
                "volume_size": 8,
                "volume_type": "gp2"
              }
            ],
            "secondary_private_ips": [],
            "security_groups": [
              "wireguard-sg-vpn"
            ],
            "source_dest_check": true,
            "subnet_id": "subnet-e8eff4c3",
            "tags": {
              "Name": "wireguard VPN Instance",
              "Project UUID": "8324868d928c0099"
            },
            "tags_all": {
              "Name": "wireguard VPN Instance",
              "Project UUID": "8324868d928c0099"
            },
            "tenancy": "default",
            "timeouts": null,
            "user_data": "4c902bde0b5688b347d46d11ecb5f31e2c2394b7",
            "user_data_base64": null,
            "user_data_replace_on_change": false,
            "volume_tags": null,
            "vpc_security_group_ids": [
              "sg-097a5ae4773e1172b"
            ]
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6MTIwMDAwMDAwMDAwMCwidXBkYXRlIjo2MDAwMDAwMDAwMDB9LCJzY2hlbWFfdmVyc2lvbiI6IjEifQ==",
          "dependencies": [
            "aws_default_vpc.default",
            "aws_iam_instance_profile.ec2-s3-role",
            "aws_iam_role.ec2-s3-role",
            "aws_key_pair.auth",
            "aws_security_group.wireguard",
            "data.aws_ami.latest_ubuntu",
            "data.aws_iam_policy_document.ec2-assume-role",
            "data.template_file.conf_backup",
            "data.template_file.conf_create",
            "random_id.project_uuid",
            "random_integer.client_port",
            "random_integer.web_port",
            "random_password.web_admin_pass",
            "tls_private_key.ssh"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_key_pair",
      "name": "auth",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "arn": "arn:aws:ec2:us-west-2:207351400916:key-pair/wireguard-key",
            "fingerprint": "4GLOKTud6mXPU6gYtfsTk9uLEhGADjewA899/xtKgDU=",
            "id": "wireguard-key",
            "key_name": "wireguard-key",
            "key_name_prefix": "",
            "key_pair_id": "key-042a58168ca9a8f03",
            "key_type": "ed25519",
            "public_key": "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIEhEn23z3Ffs46TZ2hhQR+Yum4weN+MVNc66MXDUIxix",
            "tags": {},
            "tags_all": {}
          },
          "sensitive_attributes": [],
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjEifQ==",
          "dependencies": [
            "tls_private_key.ssh"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_security_group",
      "name": "wireguard",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "arn": "arn:aws:ec2:us-west-2:207351400916:security-group/sg-097a5ae4773e1172b",
            "description": "Wireguard security group",
            "egress": [
              {
                "cidr_blocks": [
                  "0.0.0.0/0"
                ],
                "description": "",
                "from_port": 0,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "-1",
                "security_groups": [],
                "self": false,
                "to_port": 0
              }
            ],
            "id": "sg-097a5ae4773e1172b",
            "ingress": [
              {
                "cidr_blocks": [
                  "0.0.0.0/0"
                ],
                "description": "",
                "from_port": 22,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "tcp",
                "security_groups": [],
                "self": false,
                "to_port": 22
              },
              {
                "cidr_blocks": [
                  "0.0.0.0/0"
                ],
                "description": "",
                "from_port": 24084,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "udp",
                "security_groups": [],
                "self": false,
                "to_port": 24084
              },
              {
                "cidr_blocks": [
                  "0.0.0.0/0"
                ],
                "description": "",
                "from_port": 8677,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "tcp",
                "security_groups": [],
                "self": false,
                "to_port": 8677
              }
            ],
            "name": "wireguard-sg-vpn",
            "name_prefix": "",
            "owner_id": "207351400916",
            "revoke_rules_on_delete": false,
            "tags": {
              "Name": "wireguard TCP/UDP Access",
              "Project UUID": "8324868d928c0099"
            },
            "tags_all": {
              "Name": "wireguard TCP/UDP Access",
              "Project UUID": "8324868d928c0099"
            },
            "timeouts": null,
            "vpc_id": "vpc-6cc2c514"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6OTAwMDAwMDAwMDAwfSwic2NoZW1hX3ZlcnNpb24iOiIxIn0=",
          "dependencies": [
            "aws_default_vpc.default",
            "random_id.project_uuid",
            "random_integer.client_port",
            "random_integer.web_port"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "random_id",
      "name": "project_uuid",
      "provider": "provider[\"registry.terraform.io/hashicorp/random\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "b64_std": "gySGjZKMAJk=",
            "b64_url": "gySGjZKMAJk",
            "byte_length": 8,
            "dec": "9449825860737302681",
            "hex": "8324868d928c0099",
            "id": "gySGjZKMAJk",
            "keepers": null,
            "prefix": null
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "mode": "managed",
      "type": "random_integer",
      "name": "client_port",
      "provider": "provider[\"registry.terraform.io/hashicorp/random\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "24084",
            "keepers": null,
            "max": 65536,
            "min": 10000,
            "result": 24084,
            "seed": null
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "mode": "managed",
      "type": "random_integer",
      "name": "web_port",
      "provider": "provider[\"registry.terraform.io/hashicorp/random\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "8677",
            "keepers": null,
            "max": 9999,
            "min": 1000,
            "result": 8677,
            "seed": null
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "mode": "managed",
      "type": "random_password",
      "name": "web_admin_pass",
      "provider": "provider[\"registry.terraform.io/hashicorp/random\"]",
      "instances": [
        {
          "schema_version": 2,
          "attributes": {
            "bcrypt_hash": "$2a$10$Q3i0Ow4u/Wm2lk1EJ5dmxu6uoUPFiWz99zmw51TRLvAn2xLDtfOyO",
            "id": "none",
            "keepers": null,
            "length": 8,
            "lower": true,
            "min_lower": 0,
            "min_numeric": 0,
            "min_special": 0,
            "min_upper": 0,
            "number": true,
            "numeric": true,
            "override_special": "",
            "result": "eY]2_kV7",
            "special": true,
            "upper": true
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "mode": "managed",
      "type": "tls_private_key",
      "name": "ssh",
      "provider": "provider[\"registry.terraform.io/hashicorp/tls\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "algorithm": "ED25519",
            "ecdsa_curve": "P224",
            "id": "97e887e51f7693d782878d3288b96c0ea590e74f",
            "private_key_openssh": "-----BEGIN OPENSSH PRIVATE KEY-----\nb3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAAAMwAAAAtz\nc2gtZWQyNTUxOQAAACBIRJ9t89xX7OOk2doYUEfmLpuMHjfjFTXOujFw1CMYsQAA\nAIjFaAR8xWgEfAAAAAtzc2gtZWQyNTUxOQAAACBIRJ9t89xX7OOk2doYUEfmLpuM\nHjfjFTXOujFw1CMYsQAAAEDE9Pto3nUO5jrmmTaNublLRGfm341kjNrcUgWebIbS\n90hEn23z3Ffs46TZ2hhQR+Yum4weN+MVNc66MXDUIxixAAAAAAECAwQF\n-----END OPENSSH PRIVATE KEY-----\n",
            "private_key_pem": "-----BEGIN PRIVATE KEY-----\nMC4CAQAwBQYDK2VwBCIEIMT0+2jedQ7mOuaZNo25uUtEZ+bfjWSM2txSBZ5shtL3\n-----END PRIVATE KEY-----\n",
            "private_key_pem_pkcs8": "-----BEGIN PRIVATE KEY-----\nMC4CAQAwBQYDK2VwBCIEIMT0+2jedQ7mOuaZNo25uUtEZ+bfjWSM2txSBZ5shtL3\n-----END PRIVATE KEY-----\n",
            "public_key_fingerprint_md5": "f8:57:45:23:b6:aa:3c:7f:d4:e2:31:54:84:e6:50:1e",
            "public_key_fingerprint_sha256": "SHA256:4GLOKTud6mXPU6gYtfsTk9uLEhGADjewA899/xtKgDU",
            "public_key_openssh": "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIEhEn23z3Ffs46TZ2hhQR+Yum4weN+MVNc66MXDUIxix\n",
            "public_key_pem": "-----BEGIN PUBLIC KEY-----\nMCowBQYDK2VwAyEASESfbfPcV+zjpNnaGFBH5i6bjB434xU1zroxcNQjGLE=\n-----END PUBLIC KEY-----\n",
            "rsa_bits": 2048
          },
          "sensitive_attributes": []
        }
      ]
    }
  ]
}
